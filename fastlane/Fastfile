# require 'json'

# default_platform(:ios)

# platform :ios do
#   desc "Upload IPA to TestFlight"
#   lane :upload_ipa_to_testflight do
#     # Read and parse the JSON content into a Ruby hash
#     api_key_path = "/Users/runner/work/_temp/api_key.json"
#     api_key_contents = File.read(api_key_path)
#     api_key = JSON.parse(api_key_contents)

#     # Create the correct API key format
#     app_store_connect_api_key = {
#       key_id: api_key["key_id"],
#       issuer_id: api_key["issuer_id"],
#       key: api_key["key"],
#       is_key_content_base64: false
#     }

#     # Get the current build number for the latest build on TestFlight
#     current_build_number = latest_testflight_build_number(
#       app_identifier: "com.test.todo.kehinde",
#       api_key: app_store_connect_api_key
#     )

#     # Increment the build number and update CFBundleVersion
#     increment_build_number(
#       build_number: current_build_number + 1
#     )

#     # Manually update CFBundleVersion in Info.plist
#     sh("plutil -replace CFBundleVersion -string '#{current_build_number + 1}' /Users/runner/work/todo/todo/ToDo/Info.plist")


#     # Upload the IPA to TestFlight
#     pilot(
#       ipa: "/Users/runner/work/_temp/latest-Todo.ipa",
#       app_identifier: "com.test.todo.kehinde",
#       api_key: app_store_connect_api_key
#     )
#   end
# end

default_platform(:ios)

platform :ios do
  desc "Upload IPA to TestFlight"
  lane :upload_ipa_to_testflight do
    # Path to the decoded API key file
    api_key_path = "/path/to/api_key.json"  # Ensure this path is correct

    api_key = app_store_connect_api_key(
      key_filepath: api_key_path  # Provide the path to the decoded API key
    )

    pilot(
      api_key: api_key,
      ipa: ENV['RUNNER_TEMP'] + "/Todo.ipa",
      app_identifier: "com.test.todo.kehinde" # Ensure this matches exactly
    )
  end
end
