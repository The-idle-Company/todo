# Name of the GitHub Action workflow
name: "Build iOS app"

# Trigger the workflow on push or pull request to the 'main' branch
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: macos-latest # Specify the OS to use; macOS is required for iOS app deployment

    steps:
      - name: Set up job
        run: echo "Setting up job..." # Initial setup step for the deployment job

      - name: Set debug logging
        run: echo "##[debug]Logging enabled" # Enable debug logging for more detailed output during the job

      - name: Checkout repository
        uses: actions/checkout@v3 # Check out the repository's code

      - uses: actions/cache@v2 # Cache dependencies to speed up the job execution
        with:
          path: vendor/bundle # Path to cache
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }} # Generate a cache key based on the OS and Gemfile.lock
          restore-keys: |
            ${{ runner.os }}-gems- # Restore the cache if an exact match is not found

      - name: Decode API Key File
        run: echo "${{ secrets.APP_STORE_CONNECT_API_KEY_JSON }}" | base64 --decode > ${{ runner.temp }}/api_key.json # Decode the App Store Connect API key from base64
        shell: bash # Use bash shell to run the command

      - name: Install Ruby and Fastlane
        uses: ruby/setup-ruby@v1 # Set up Ruby environment
        with:
          ruby-version: '3.0' # Specify Ruby version

      - name: Update Fastlane
        run: |
          bundle update fastlane # Update Fastlane to the latest version

      - name: Build and sign iOS app using xcodebuild
        env:
          KEYCHAIN_PATH: $RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          xcodebuild -project "Todo.xcodeproj" -scheme "ToDo" \
            -archivePath "$RUNNER_TEMP/Todo.xcarchive" \
            -sdk iphoneos \
            -configuration Debug \
            clean archive \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH"

      - name: Export the archive
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }}
        run: |
          # Decode and create export options plist
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
          
          # Show the contents for debugging (mask sensitive data)
          echo "Export Options Contents:"
          cat $EXPORT_OPTS_PATH | grep -v "team\|profile"
          
          # Export the archive
          xcodebuild -exportArchive \
            -archivePath "$RUNNER_TEMP/Todo.xcarchive" \
            -exportOptionsPlist $EXPORT_OPTS_PATH \
            -exportPath "$RUNNER_TEMP/build"

      - name: Upload the built IPA file to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Generate timestamp for unique filename
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          
          # Verify IPA exists
          if [ ! -f "$RUNNER_TEMP/build/Todo.ipa" ]; then
            echo "Error: IPA file not found at $RUNNER_TEMP/build/Todo.ipa"
            ls -la "$RUNNER_TEMP/build"
            exit 1
          fi
          
          # Upload to S3
          echo "Uploading IPA to S3..."
          aws s3 cp "$RUNNER_TEMP/build/Todo.ipa" \
            "s3://${{ secrets.AWS_S3_BUCKET }}/ipa/Todo-${TIMESTAMP}.ipa" || {
            echo "Failed to upload IPA to S3"
            exit 1
          }
          
          echo "Successfully uploaded Todo-${TIMESTAMP}.ipa to S3"

      - name: List and Download the Latest IPA from S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # First check if the bucket and prefix exist
          if ! aws s3 ls "s3://${{ secrets.AWS_S3_BUCKET }}/ipa/"; then
            echo "Error: ipa/ directory not found in bucket or bucket is inaccessible"
            echo "Creating ipa directory..."
            aws s3api put-object --bucket ${{ secrets.AWS_S3_BUCKET }} --key ipa/
          fi
          
          # Check if there are any IPA files
          IPA_COUNT=$(aws s3 ls "s3://${{ secrets.AWS_S3_BUCKET }}/ipa/" | grep .ipa | wc -l)
          if [ "$IPA_COUNT" -eq 0 ]; then
            echo "No IPA files found in the bucket. This might be the first build."
            echo "Will continue with the build process..."
            exit 0
          fi
          
          # Try to get the latest IPA
          echo "Fetching latest IPA file..."
          LATEST_IPA=$(aws s3api list-objects-v2 \
            --bucket ${{ secrets.AWS_S3_BUCKET }} \
            --prefix ipa/ \
            --query 'Contents[?ends_with(Key, `.ipa`)].Key | [0]' \
            --output text)
          
          if [ "$LATEST_IPA" = "None" ] || [ -z "$LATEST_IPA" ]; then
            echo "No IPA files found. This might be the first build."
            exit 0
          else
            echo "Latest IPA: $LATEST_IPA"
            aws s3 cp "s3://${{ secrets.AWS_S3_BUCKET }}/${LATEST_IPA}" "${{ runner.temp }}/latest-Todo.ipa" || {
              echo "Failed to download IPA file"
              exit 1
            }
          fi

      - name: Check IPA File Presence
        run: |
          # Verify that the IPA file was downloaded successfully
          ls -l ${{ runner.temp }}
          if [ -f "${{ runner.temp }}/latest-Todo.ipa" ]; then
            echo "IPA file is ready for upload."
          else
            echo "IPA file not found, aborting."
            exit 1
          fi

      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }} # App Store Connect API Key ID
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }} # App Store Connect API Key Issuer ID
          APP_STORE_CONNECT_API_KEY: ${{ runner.temp }}/api_key.json # Path to the decoded API key JSON file
        run: |
          # Use Fastlane to upload the IPA file to TestFlight
          bundle exec fastlane upload_ipa_to_testflight

      - name: Cleanup API Key File
        if: always() # Ensure cleanup runs even if previous steps fail
        run: rm -f ${{ runner.temp }}/api_key.json # Remove the API key file to maintain security

      - name: Complete job
        run: echo "Job complete" # Final step to indicate the job is complete
