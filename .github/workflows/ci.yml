# Name of the GitHub Action workflow
name: "Build iOS app"

# Events that will trigger this workflow
on:
  push: # Trigger the workflow on a push to the 'main' branch
    branches:
      - main
  pull_request: # Trigger the workflow on a pull request to the 'main' branch
    branches:
      - main

jobs:
  build_with_signing:
    runs-on: macos-latest # Specify the OS to use; macOS is required for iOS builds

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # Check out the repository's code

      - name: Configure Git for Authentication
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use GitHub token from secrets
        run: |
          # Configure git to use the token for authentication, ensuring private repositories can be accessed
          git config --global url."https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

      - name: List repository contents
        run: |
          # List the contents of the repository to verify correct paths
          echo "Listing repository contents to verify path"
          ls -R

      - name: List available schemes
        run: |
          # List available schemes in the Xcode project to confirm the correct one is being used
          xcodebuild -list -project "Todo.xcodeproj"

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }} # Base64-encoded certificate
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }} # Password for the .p12 certificate file
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }} # Base64-encoded provisioning profile
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }} # Password for the keychain
        run: |
          # Decode and set up the certificate and provisioning profile
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # Create and configure a temporary keychain for signing the app
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import the certificate into the keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Copy the provisioning profile to the appropriate directory
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build and sign iOS app using xcodebuild
        env:
          KEYCHAIN_PATH: $RUNNER_TEMP/app-signing.keychain-db # Use the temporary keychain for code signing
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }} # Keychain password for unlocking
        run: |
          # Build the iOS app with Xcode and sign it using the specified identity
          xcodebuild -project "Todo.xcodeproj" -scheme "ToDo" \
            -archivePath "$RUNNER_TEMP/Todo.xcarchive" \
            -sdk iphoneos \
            -configuration Debug \
            clean archive \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            OTHER_CODE_SIGN_FLAGS="--keychain $KEYCHAIN_PATH"

      - name: Export the archive
        env:
          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST_BASE64 }} # Base64-encoded export options plist
        run: |
          # Decode the export options plist and use it to export the app archive
          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
          echo $EXPORT_OPTIONS_PLIST | base64 --decode > $EXPORT_OPTS_PATH
          cat $EXPORT_OPTS_PATH # Debugging step to check the content of the plist
          xcodebuild -exportArchive -archivePath "$RUNNER_TEMP/Todo.xcarchive" -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build

      - name: Upload the built IPA file to S3
        run: |
          # Generate a timestamped file name and upload the IPA to S3
          TIMESTAMP=$(date +"%Y%m%d%H%M%S")
          aws s3 cp "$RUNNER_TEMP/build/Todo.ipa" "s3://${{ secrets.AWS_S3_BUCKET }}/ipa/todo-${TIMESTAMP}.ipa"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS access key for S3 upload
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS secret key for S3 upload
          AWS_REGION: ${{ secrets.AWS_REGION }} # AWS region where the S3 bucket is located
